#install.packages('jpeg')
library(jpeg)

# all images uploaded must have equal x,y dimensions that are multiples of fov.region

doggy <- 255*readJPEG('doggy.jpg')
placeholder <- 255*readJPEG('Placeholder.jpg')
nature <- 255*readJPEG('nature.jpg')
doggy2 <- 255*readJPEG('doggy2.jpg')


# Parameters #
fov.region <- 5  # fov.region^2 is area of pixels. Must be a multiple of 10
contrast.cutoff <- 0.25 # if an area has a contrast value below this, it will turn into average RBG of that area

# Model #

contrast <- function(region){  # Contrast is difference in luminance (R + G). Areas with greater entropy in luminance values should
  r = region[,,1]              # have larger contrast. That's why I used Shannon entropy to calculate contrast of given region.
  g = region[,,3]
  lum = r + g
  prob <- length(unique(as.vector(lum)))/length(lum)
  contrast <- -(prob*log2(prob))
  return(contrast)
}


look <- function(image, fov.region){  
  
  # Moves through image and calculates contrast of every region in image (must be a square image)
  # Areas with higher (lower) contrast have lower (higher) probability of being changed to an average of RBG values in that area
  # Simulates phenomenon of foveating longer on areas of high contrast
  
  counter <- 0                      
  contrast.values <- numeric((length(image[ ,1,1])*length(image[1, ,1]))/(fov.region^2))  
  for(i in 1:((length(image[,1,1]))/fov.region)){
    for(n in 1:((length(image[1, ,1]))/fov.region)){  # Probably a better way to do this (vectorize?)
      counter <- counter+1
      region <- image[(((i-1)*fov.region)+1):(i*fov.region),(((n-1)*fov.region)+1):(n*fov.region), ]
      contrast.values[counter] <- contrast(region)
    }
  }
  
  contrast.norm <- contrast.values/max(contrast.values)  #normalize contrast values to 0-1
  
  counter1 <- 0
  new.image <- array(NA, c(length(image[ ,1,1]), length(image[1, ,1]), 3))
  for(j in 1:((length(image[,1,1]))/fov.region)){
    for(x in 1:((length(image[1, ,1]))/fov.region)){  # Probably a better way to do this (vectorize?)
      counter1 <- counter1 + 1
      if((runif(1)-0.5) > contrast.norm[counter1] || contrast.norm < 0.25){
        ave.r <- mean(image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region), 1])
        ave.b <- mean(image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region), 2])
        ave.g <- mean(image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region), 3])
        new.image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region),1] = ave.r
        new.image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region),2] = ave.b
        new.image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region),3] = ave.g
        
      } else{
        new.image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region), ] = image[(((j-1)*fov.region)+1):(j*fov.region),(((x-1)*fov.region)+1):(x*fov.region), ]
      }
    }
  }
  
  return(new.image/255)
  
}

new.image <- look(doggy2, fov.region)   #arg 1 is whatever you named the image
writeJPEG(new.image, target = 'new.jpg') #writes a new jpg and saves to whatever you set as target



